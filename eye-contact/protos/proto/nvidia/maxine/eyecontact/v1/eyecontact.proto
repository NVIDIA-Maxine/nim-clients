// Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto.  Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

syntax = "proto3";

package nvidia.maxine.eyecontact.v1;

import "google/protobuf/empty.proto";

// The MaxineEyeContactService provides APIs to run the
// Maxine Eye Contact feature.
service MaxineEyeContactService {

  // RedirectGaze is a bidirectional streaming API to run the
  // Maxine Eye Contact feature on mp4 video files.
  //
  // The input message can contain GazeRedirectionConfig or bytes.
  // In the beginning of the stream, a request with GazeRedirectionConfig may
  // be sent to the server to set the feature's parameter.
  // The server will echo back a response with the config to signify that the
  // parameters were properly set. If not configured, default values will be
  // used for the feature's parameters. Any GazeRedirectionConfig sent during
  // the middle of the stream will be ignored.
  //
  // After the optional configuration, the client streams the input mp4 file in
  // chunks in the input message and receives the output mp4 file in chunks in
  // the output message.
  //
  // The client should only pass one video file per API invocation and the
  // configuration, if set, is applied to only that invocation.
  rpc RedirectGaze(stream RedirectGazeRequest)
      returns (stream RedirectGazeResponse) {}
}

// Configuration for Maxine Eye Contact.
message RedirectGazeConfig {
  // Flag to control temporal filtering 
  // Default: 0xffffffff
  uint32 temporal = 1;

  // Flag to toggle detection of eye closure and occlusion on/off
  // Default: 0 | Range: [0, 1]
  uint32 detect_closure = 2;

  // Eye size sensitivity parameter
  // Default: 3 | Range: [2, 6]
  uint32 eye_size_sensitivity = 3;

  // Flag to toggle look away on/off.
  // Default: 0 | Range: [0, 1]
  uint32 enable_lookaway = 4;

  // Maximum value of gaze offset angle (degrees) during a random look away
  // Default: 5 | Range: [1, 10]
  uint32 lookaway_max_offset = 5;

  // Minimum limit for the number of frames at which random look away occurs
  // Default: 100 | Range: [1, 600]
  uint32 lookaway_interval_min = 6;

  // Range for picking the number of frames at which random look away occurs
  // Default: 250 | Range: [1, 600]
  uint32 lookaway_interval_range = 7;

  // Gaze pitch threshold (degrees) at which the redirection starts transitioning
  // Default: 20 | Range: [10, 35]
  float gaze_pitch_threshold_low = 8;

  // Gaze pitch threshold (degrees) at which the redirection is equal to estimated gaze
  // Default: 30 | Range: [10, 35] 
  float gaze_pitch_threshold_high = 9;

  // Gaze yaw threshold (degrees) at which the redirection starts transitioning
  // Default: 20 | Range: [10, 35]
  float gaze_yaw_threshold_low = 10;

  // Gaze yaw threshold (degrees) at which the redirection the redirection is equal to estimated gaze
  // Default: 30 | Range: [10 ,35]
  float gaze_yaw_threshold_high = 11;

  // Head pose pitch yaw threshold (degrees) at which the redirection start transitioning away from camera towards estimated gaze
  // Default: 15 | Range: [10, 35]
  float head_pitch_threshold_low = 12;
  
  // Head pose pitch yaw threshold (degrees) at which the redirection is equal to estimated gaze
  // Default: 15 | Range: [10, 35]
  float head_pitch_threshold_high = 13;

  // Head pose yaw threshold (degrees) at which the redirection starts transitioning
  // Default: 15 | Range: [10, 35]
  float head_yaw_threshold_low = 14;

  // Head pose yaw threshold (degrees) at which the redirection is equal to estimated gaze
  // Default: 15 | Range: [10, 35]
  float head_yaw_threshold_high = 15;
}

// Input message for RedirectGaze API.
// May contain feature configuration or a chunk of input mp4 file data.
message RedirectGazeRequest {
  oneof stream_input {
    // Configuration parameters for the request
    RedirectGazeConfig config = 1;

    // mp4 file based video data
    bytes video_file_data = 2;
  }
}

// Output message for RedirectGaze API.
// May contain feature configuration, a chunk of output mp4 file data
// or an empty message to keep the connection alive.
message RedirectGazeResponse {
  oneof stream_output {
    // Configuration parameters used
    RedirectGazeConfig config = 1;

    // Output mp4 video stream data
    bytes video_file_data = 2;

    // Keep alive signaling flag
    google.protobuf.Empty keepalive = 3;
  }
}
