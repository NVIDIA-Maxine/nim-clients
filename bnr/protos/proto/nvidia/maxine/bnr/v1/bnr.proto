// Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

syntax = "proto3";

package nvidia.maxine.bnr.v1;

// The MaxineBNR service provides APIs to run the
// Maxine BNR NIM.
service MaxineBNR {
    // EnhanceAudio is a bidirectional streaming RPC to run the
    // Maxine BNR NIM on audio files.
    //
    // The client streams the input audio file in chunks in the input message and 
    // receives the output audio file in chunks in the output message.
    //
    // The client should only pass one audio file per RPC invocation.
    rpc EnhanceAudio(stream EnhanceAudioRequest) returns (stream EnhanceAudioResponse) {}
}

// Configuration for EnhanceAudio API.
message EnhanceAudioConfig {
    // Intensity ratio between 0.0f to 1.0f. 
    // Default: 1.0
    optional float intensity_ratio = 1;
}

// Input message for EnhanceAudio RPC.
message EnhanceAudioRequest {
    oneof stream_input {    
        // Contains a chunk of input audio file data.
        // 32 bit float audio samples
        bytes audio_stream_data = 1;

        // Configuration parameters for the request
        EnhanceAudioConfig config = 2;
    }
}

// Output message for EnhanceAudio RPC.
message EnhanceAudioResponse {
    oneof stream_output {
        // Contains a chunk of output audio file data.
        // 32 bit float audio samples
        bytes audio_stream_data = 1;

        // Configuration parameters used
        EnhanceAudioConfig config = 2;
    }
}